pipeline {
    agent any

    environment {
        GITHUB_REPO = 'https://github.com/BskRao/Sai-Jenkins-.git'
        REGISTRY = 'saikiran1670/jenkinscicd'
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER = 'my-eks-cluster'
        DEPLOYMENT_NAME = 'myapp-deployment'
        K8S_NAMESPACE = 'default'  // change if needed
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${env.GITHUB_REPO}", credentialsId: 'Jenkins-Github'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${REGISTRY}:${env.BUILD_NUMBER}")
                }
            }
        }

        stage('Docker Login and Push') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'Jenkins-dockerhub') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'Jenkins-AWS') {
                    sh '''
                    cd terraform
                    terraform init
                    terraform plan -out=tfplan
                    terraform apply -auto-approve tfplan
                    '''
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'Jenkins-AWS') {
                    sh """
                    aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.EKS_CLUSTER}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh """
                kubectl -n ${env.K8S_NAMESPACE} set image deployment/${env.DEPLOYMENT_NAME} myapp=${REGISTRY}:${env.BUILD_NUMBER} --record
                """
            }
        }
    }
}
